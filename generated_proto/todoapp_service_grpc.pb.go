// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protopack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagePostServiceClient is the client API for ManagePostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagePostServiceClient interface {
	AddPost(ctx context.Context, in *AddPostRequest, opts ...grpc.CallOption) (*AddPostResponse, error)
}

type managePostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagePostServiceClient(cc grpc.ClientConnInterface) ManagePostServiceClient {
	return &managePostServiceClient{cc}
}

func (c *managePostServiceClient) AddPost(ctx context.Context, in *AddPostRequest, opts ...grpc.CallOption) (*AddPostResponse, error) {
	out := new(AddPostResponse)
	err := c.cc.Invoke(ctx, "/protopack.ManagePostService/AddPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagePostServiceServer is the server API for ManagePostService service.
// All implementations must embed UnimplementedManagePostServiceServer
// for forward compatibility
type ManagePostServiceServer interface {
	AddPost(context.Context, *AddPostRequest) (*AddPostResponse, error)
	mustEmbedUnimplementedManagePostServiceServer()
}

// UnimplementedManagePostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagePostServiceServer struct {
}

func (UnimplementedManagePostServiceServer) AddPost(context.Context, *AddPostRequest) (*AddPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPost not implemented")
}
func (UnimplementedManagePostServiceServer) mustEmbedUnimplementedManagePostServiceServer() {}

// UnsafeManagePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagePostServiceServer will
// result in compilation errors.
type UnsafeManagePostServiceServer interface {
	mustEmbedUnimplementedManagePostServiceServer()
}

func RegisterManagePostServiceServer(s grpc.ServiceRegistrar, srv ManagePostServiceServer) {
	s.RegisterService(&ManagePostService_ServiceDesc, srv)
}

func _ManagePostService_AddPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagePostServiceServer).AddPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protopack.ManagePostService/AddPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagePostServiceServer).AddPost(ctx, req.(*AddPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagePostService_ServiceDesc is the grpc.ServiceDesc for ManagePostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagePostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protopack.ManagePostService",
	HandlerType: (*ManagePostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPost",
			Handler:    _ManagePostService_AddPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todoapp_service.proto",
}
